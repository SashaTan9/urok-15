Все прекрасно
Как создать репозиторий
1. Создать в FM папку х.
2. В CL ввести команду git init (инициализация новой папки х)
3. В GH создать новый репозиторий х и скопировать его адрес с учетом HTTP
4. Зайти в FM в инициализированную (см. п.2) папку х и оттуда см. п.5.
5. В CL ввести слова команды git remote add origin после которых вставляем скопированный по п.3 адрес репозитория х на GH
6. В FM в папке х создаем какой-либо файл y и встаем на самый верх FM где типа пара точек названия папки х
7. В СL вводим команду git add . (можно без точки написать прям имя файла тока с расширением)
8. В CL вводим команду git commit -a -m"любой короткий коментарий типа initial or first commit"
9. Наверно пп.6-8 можно и пропустить если файлы пока не нужны...
10. В CL вводим команду git push --set-upstream origin master 
11. Что касается командры git branch -M main, то ее пока во всякому случае, использовать не нужно.

Как создать новую ветку
По умолчанию ветка предоставляется автоматом GH-ом и называется она либо master, либо main. В последнем случае такое имя дается GH-ом, если первый коммит создавался в GH и еще там чето.
1. В CL ввести команду git checkout -b после которой печатаем имя ветки, которое хотим. (Так мы уже автоматом на этой созданной ветке).  При этом не забываем контролировать в каком каталоге находимся в FM.
2. Ведем какуто работу на этой ветке: создаем новый, либо изменяем какой-то файл и т.д. короче вносим изменения (при этом у нас файлы от ветки master никуда не делись и лежат в новой ветке)
3. Добавляем изменения в результате проделанной работы командой git add .
4. Комитим изменения командрой git commit -a -m"текст который хотим" 
5. Теперь можно проверить где находятся комитовые изменения командрой git status (Мы увидим, что он уже на новой ветке)
6. Можно запустить команду branch --list (она должна показать, что теперь у нас 2 ветки и новая выделена звездочкой, наверно это обозначение где работаем в данный момент) хз короче
7. Последнее - закидываем хзкуда эту новую ветку командой git push --set-upstream origin печатаем имя созданной ветки см. п.1
8. Эта ветка идет именно от ветки master, потому что создавали мы ее с ветки master
После всей этой мутатени на HB у нас появяться уже 2 ветки (master и вот эта). На GH они переключаются (переходить) простым выбором и там глядим содержимое, 
а в FM - набираем команду git checkout имя ветки, при этом в панели FM будет отображаться содержимое каждой ветки.

Рекомендуемый порядок ежедневной работы. Перед началом работы:
1. Проверка обновления (веток видимо) git pull
2. Проверка состояния (веток видмо) git status
3. Переход на нужную ветку git checkout имя ветки
4. Работа в ней - добавление изменений см. п.7 первого раздела - фиксирование изменений см. п.8 первого раздела (как обычно)
5. Отправка изменений на GH и здесь ВАЖНО если ветку уже пушили то команда будет просто git push

Как я сливала 7 июня 2 ветки в одну
1. В FM зашла в папку репозитория.
2. Проверила на какой ветке нахожусь в данный момен с помощью команды git --list (ответ был, что я на ветке june04)
3. Перешла на ветку мастера с помощью команды git checkout master
4. От ветки мастера создаю новую ветку с помощью команды git checkout -b june7 (в результате типа я оказалась в этой новой ветке)
5. git push --set-upstreem origin june7 (застримила эту ветку. в результате в HG я ее увидела, но она была пустая, без каких либо файлов)
6. Для этой новой ветки беру содержимое  из веток june03 и june04 поэтому см. п.7
7. Даю команду git merge june03 june04
8. На этих ветках был файл с одним и тем же названием, но разным содержимым. Короче я просто сверху ввела новую строчку и конфлик разрешился.
9. Далее как обычно: git add . и commit -a -m"conflict done"
10. И наконец команда git push.
11. После чего в данной ветке появилось содержимое которое я хотела
